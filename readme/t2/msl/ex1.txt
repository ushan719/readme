//arrayadt**************************************************************************************************************************************

class ArrayADT {
    int[] array;
    int size;
    
    public ArrayADT(int capacity) {
        array = new int[capacity];
        size = 0;
    }
    
	public boolean isEmpty() {
        return size == 0;
    }
    
    public boolean isFull() {
        return size == array.length;
    }
	
	public int get(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index is out of range");
        }
        return array[index];
    }
    
    public void set(int index, int value) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index is out of range");
        }
        array[index] = value;
    }
    
    public int getSize() {
        return size;
    }
	
    public void insert(int index, int value) {		
        if (index < 0 || index > array.length-1) {
			System.out.println("Index is out of range");
            //throw new IndexOutOfBoundsException("Index is out of range");
        }
		else if(isFull()){
			System.out.println("Array is full");
		}		
		else{
			// Shift elements to the right to make space for the new value
			for (int i = size - 1; i >= index; i--) {
				array[i + 1] = array[i];
			}
			array[index] = value;
			size++;
			System.out.println(value+ " inserted at "+ index);
		}        
    }

	public void delete(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index is out of range");
        }
		else if(isEmpty()){
			System.out.println("Array is empty");
		}
		else{
			// Shift elements to the left to remove the element at the given index
			for (int i = index; i < size - 1; i++) {
				array[i] = array[i + 1];
			}
			array[size-1] = 0;
			size--;
		}
    }
    
    public int search(int value) {
		if(isEmpty()){
			System.out.println("Array is empty");
			return -1; 
		}
		else{
			for (int i = 0; i < size; i++) {
				if (array[i] == value) {
					return i;
				}
			}
			return -1;  // Value not found
		}        
    }
    
    public void traverse() {
        for (int i = 0; i < size; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }
	
	/*
	private void resizeArray() {
        int[] newArray = new int[array.length * 2];
        System.arraycopy(array, 0, newArray, 0, size);
        array = newArray;
    } */
	
    public static void main(String[] args) {
        ArrayADT arr = new ArrayADT(5);
        
        // Inserting elements
        arr.insert(0, 5);
        arr.insert(1, 2);
        arr.insert(2, 7);
        arr.insert(3, 3);
		arr.insert(4, 2);
		//arr.insert(4, 2);
		arr.insert(5, 2);
		
		// Accessing and modifying elements
        System.out.println("Element at index 2: " + arr.get(2));
        arr.set(2, 9);
        System.out.println("Modified element at index 2: " + arr.get(2));
        
        // Determining the size
        System.out.println("Size of the array: " + arr.getSize());
        
        // Deleting an element
		arr.delete(1);
        System.out.println("Size after deleting an element: " + arr.getSize());
		        
        // Searching for an element
        int index = arr.search(7);
        System.out.println("Index of element 7: " + index);
        
        // Traversing the array
        arr.traverse();               
    }
}
************************************************************************************************************
arraylist example
************************************************************************************************************
import java.util.ArrayList;

public class ArrayListExample1 {
    public static void main(String[] args) {
		// ----------------------------------------
        // Create an ArrayList of integers
		// ----------------------------------------
        // ArrayList<Integer> arrayList = new ArrayList<>();
		ArrayList<Integer> arrayList = new ArrayList<Integer>();

        // Add elements to the ArrayList
        for (int i = 1; i <= 15; i++)
            arrayList.add(i*2);		
				
        // Accessing and modifying elements
        int element = arrayList.get(2);
        System.out.println("Element at index 2: " + element);

        arrayList.set(2, 9);
        System.out.println("Modified element at index 2: " + arrayList.get(2));

        // Determining the size
        int size = arrayList.size();
        System.out.println("Size of the ArrayList: " + size);

        // Removing an element
        arrayList.remove(1);
        System.out.println("Size after removing an element: " + arrayList.size());

        // Searching for an element
        int index = arrayList.indexOf(7);
        System.out.println("Index of element 7: " + index);
		
		if (arrayList.contains(8)) System.out.println("8 is exists");
		else System.out.println("8 is not exists");

        System.out.println(arrayList);
		
		// Traversing the ArrayList
        for (int i = 0; i < arrayList.size(); i++) {
            System.out.print(arrayList.get(i) + " ");
        }
		
		System.out.println("\n_________________________\n");
		
		// ----------------------------------------
        // Create an ArrayList that can accept objects of any type
		// ----------------------------------------
        ArrayList<Object> list = new ArrayList<>();

        // Add objects of different types to the ArrayList
        list.add("Hello");
        list.add(42);
        list.add(3.14);
        list.add(true);
		list.add('c');

		System.out.println(list);
		
        // Accessing objects from the ArrayList
        Object obj1 = list.get(0);
        System.out.println("Element at index 0: " + obj1);

		list.set(1, 1000);
        System.out.println("Element at index 1: " + list.get(1));

		// Traversing the ArrayList
        for (int i = 0; i < list.size(); i++) {
            System.out.print(list.get(i) + " ");
        }
    }
}
***************************************************************************************************************
array intersection
***************************************************************************************************************
import java.util.ArrayList;

public class ArrayListIntersection {
    
    public static ArrayList<Integer> findIntersection(ArrayList<Integer> list1, ArrayList<Integer> list2) {
        ArrayList<Integer> intersection = new ArrayList<>();
		/*
        for (Integer num : list1) {
            if (list2.contains(num) && !intersection.contains(num)) {
                intersection.add(num);
            }
        }
		*/
		for (int i = 0; i < list1.size(); i++) {
            if (list2.contains(list1.get(i)) && !intersection.contains(list1.get(i))) {
                intersection.add(list1.get(i));
            }
        }
		
        return intersection;
    }

    public static void main(String[] args) {
        ArrayList<Integer> list1 = new ArrayList<>();
        list1.add(1);
        list1.add(2);
        list1.add(3);
        list1.add(4);
        list1.add(5);

        ArrayList<Integer> list2 = new ArrayList<>();
        list2.add(3);
        list2.add(4);
        list2.add(5);
        list2.add(6);
        list2.add(7);

        ArrayList<Integer> intersection = findIntersection(list1, list2);

        System.out.println("Intersection: " + intersection);
    }
}
*****************************************************************************************************************
meregesorted arrays
*****************************************************************************************************************
import java.util.ArrayList;

public class MergeSortedArrays {
    
    public static ArrayList<Double> mergeArrays(double[] ascendingArray, double[] descendingArray) {
        ArrayList<Double> mergedArray = new ArrayList<>();
        
        int i = 0;  // Pointer for ascendingArray
        int j = descendingArray.length - 1;  // Pointer for descendingArray
        
        // Merge the arrays by comparing elements from both arrays
        while (i < ascendingArray.length && j >= 0) {
            if (ascendingArray[i] < descendingArray[j]) {
                mergedArray.add(ascendingArray[i]);
                i++;
            } else {
                mergedArray.add(descendingArray[j]);
                j--;
            }
        }
        
        // Add remaining elements from the ascending array, if any
        while (i < ascendingArray.length) {
            mergedArray.add(ascendingArray[i]);
            i++;
        }
        
        // Add remaining elements from the descending array, if any
        while (j >= 0) {
            mergedArray.add(descendingArray[j]);
            j--;
        }
        
        return mergedArray;
    }
    
    public static void main(String[] args) {
        double[] ascendingArray = {1.2, 2.3, 3.4, 4.5, 5.6};
        double[] descendingArray = {9.8, 8.7, 7.6, 6.5};
        
        ArrayList<Double> mergedArray = mergeArrays(ascendingArray, descendingArray);
        
        System.out.println("Merged Array: " + mergedArray);
    }
}
******************************************************************************************
studentlist
*******************************************************************************************
import java.util.ArrayList;

class Student {
    private String name;
    private int age;
    private double grade;

    public Student(String name, int age, double grade) {
        this.name = name;
        this.age = age;
        this.grade = grade;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public double getGrade() {
        return grade;
    }

    public void setGrade(double grade) {
        this.grade = grade;
    }
}

public class StudentListOperations {
    public static void main(String[] args) {
        ArrayList<Student> studentList = new ArrayList<>();

        // Add three students to the studentList
        studentList.add(new Student("John Doe", 18, 85.5));
        studentList.add(new Student("Jane Smith", 17, 92.0));
        studentList.add(new Student("Michael Johnson", 19, 78.3));

        // Print the details of all students
        System.out.println("Details of all students:");
        for (Student student : studentList) {
            System.out.println("Name: " + student.getName() + ", Age: " + student.getAge() + ", Grade: " + student.getGrade());
        }

        // Update the grade of "John Doe" to 90.2
        for (Student student : studentList) {
            if (student.getName().equals("John Doe")) {
                student.setGrade(90.2);
                break;
            }
        }

        // Remove "Jane Smith" from the studentList
        Student janeSmith = null;
        for (Student student : studentList) {
            if (student.getName().equals("Jane Smith")) {
                janeSmith = student;
                break;
            }
        }
        studentList.remove(janeSmith);

        // Print the details of all students after the modifications
        System.out.println("\nDetails of all students after modifications:");
        for (Student student : studentList) {
            System.out.println("Name: " + student.getName() + ", Age: " + student.getAge() + ", Grade: " + student.getGrade());
        }
    }
}
**************************************************************************************************************
singly linked list
*************************************************************************************************************
class Node {
	int data;
	Node next;

	public Node(int data) {
		this.data = data;
		this.next = null;
	}
}

class LinkedListADT {
	Node head;

	public LinkedListADT() {
		this.head = null;
	}
	
	public boolean isEmpty() {
		return head == null;
	}

	public void insertAtFront(int data) {
		Node newNode = new Node(data);
		if (isEmpty()) {
			head = newNode;
		} else {
			newNode.next = head;
			head = newNode;
		}
	}

	public void insertAtEnd(int data) {
		Node newNode = new Node(data);
		if (isEmpty()) {
			head = newNode;
		} else {
			Node current = head;
			while (current.next != null) {
				current = current.next;
			}
			current.next = newNode;
		}
	}

	public void insertAtIndex(int data, int index) {
		if (index < 1 || index > getSize()+1) {
			System.out.println("Invalid index");
			return;
		}
		if (index == 1) {
			insertAtFront(data);
			return;
		}
		Node newNode = new Node(data);
		Node current = head;
		for (int c = 1; c < index - 1; c++){
			current = current.next;				
		}
		newNode.next = current.next;
		current.next = newNode;
	}

	public void deleteAtFront() {
		if (isEmpty()) {
			System.out.println("Linked list is empty");
		} else {
			head = head.next;
		}
	}

	public void deleteAtEnd() {
		if (isEmpty()) {
			System.out.println("Linked list is empty");
		} else if (head.next == null) {
			head = null;
		} else {
			Node current = head;
			Node previous = null;
			while (current.next != null) {
				previous = current;
				current = current.next;
			}
			previous.next = null;
		}
	}

	public void deleteAtIndex(int index) {
		if (index < 1 || index > getSize()) {
			System.out.println("Invalid index");
			return;
		}
		if (index == 1) {
			deleteAtFront();
			return;
		}
		Node current = head;
		for (int c = 1; c < index - 1; c++){
			current = current.next;				
		}
		current.next = current.next.next;
	}

	public boolean search(int data) {
		Node current = head;
		while (current != null) {
			if (current.data == data) {
				return true;
			}
			current = current.next;
		}
		return false;
	}

	public int getSize() {
		int count = 0;
		Node current = head;
		while (current != null) {
			count++;
			current = current.next;
		}
		return count;
	}

	public void display() {
		if (isEmpty()) {
			System.out.println("Linked list is empty");
		} else {
			Node current = head;
			while (current != null) {
				System.out.print(current.data + " ");
				current = current.next;
			}
			System.out.println();
		}
	}
}

public class SinglyLinkedList {
	public static void main(String[] args) {
		LinkedListADT linkedList = new LinkedListADT();

		linkedList.insertAtFront(3);
		linkedList.insertAtFront(2);
		linkedList.insertAtFront(1);

		linkedList.display(); // Output: 1 2 3

		linkedList.insertAtEnd(4);
		linkedList.insertAtEnd(5);

		linkedList.display(); // Output: 1 2 3 4 5

		linkedList.insertAtIndex(10, 2);

		linkedList.display(); // Output: 1 2 10 3 4 5

		linkedList.deleteAtFront();
		linkedList.deleteAtEnd();

		linkedList.display(); // Output: 2 10 3 4
		
		linkedList.deleteAtIndex(2);

		linkedList.display(); // Output: 2 10 4
	}
}
**************************************************************************************************************



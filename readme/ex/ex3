//Exercise - 3

// Question1
public class MinimumValueFinder {
    public static int findMinimumValue(ArrayADT arr) {
        if (arr.getSize() == 0) {
            throw new IllegalArgumentException("Array is empty");
        }
        
        int minimum = arr.get(0);
        
        for (int i = 1; i < arr.getSize(); i++) {
            int currentValue = arr.get(i);
            if (currentValue < minimum) {
                minimum = currentValue;
            }
        }
        
        return minimum;
    }
    
    public static void main(String[] args) {
        ArrayADT arr = new ArrayADT(5);
        
        // Inserting elements
        arr.insert(0, 5);
        arr.insert(1, 2);
        arr.insert(2, 7);
        arr.insert(3, 3);
        arr.insert(4, 2);
        
        int minimumValue = findMinimumValue(arr);
        System.out.println("Minimum value in the array: " + minimumValue);
    }
}

// Question2
public class ArrayReverse {
    public static void reverseArray(ArrayADT arrayADT) {
        int left = 0;
        int right = arrayADT.getSize() - 1;

        while (left < right) {
            int temp = arrayADT.get(left);
            arrayADT.set(left, arrayADT.get(right));
            arrayADT.set(right, temp);
            left++;
            right--;
        }
    }

    public static void main(String[] args) {
        ArrayADT arr = new ArrayADT(5);

        // Inserting elements
        arr.insert(0, 5);
        arr.insert(1, 2);
        arr.insert(2, 7);
        arr.insert(3, 3);
        arr.insert(4, 2);

        System.out.println("Original array:");
        arr.traverse();

        reverseArray(arr);

        System.out.println("Reversed array:");
        arr.traverse();
    }
}

// Question3
public class ArrayFrequency {
    public static void countFrequency(ArrayADT arrayADT) {
        int[] frequencies = new int[arrayADT.getSize()];
        boolean[] counted = new boolean[arrayADT.getSize()];

        for (int i = 0; i < arrayADT.getSize(); i++) { 
            int element = arrayADT.get(i);
            int frequency = 1;

            if (!counted[i]) {
                for (int j = i + 1; j < arrayADT.getSize(); j++) {
                    if (arrayADT.get(j) == element) {
                        frequency++;
                        counted[j] = true;
                    }
                }
                frequencies[i] = frequency;
            }
        }

        // Print the frequency of each element
        for (int i = 0; i < arrayADT.getSize(); i++) {
            if (frequencies[i] != 0) 
				System.out.println("Element " + arrayADT.get(i) + ": Frequency " + frequencies[i]);
        }
    }

    public static void main(String[] args) {
        ArrayADT arr = new ArrayADT(10);

        // Inserting elements
        arr.insert(0, 5);
        arr.insert(1, 2);
        arr.insert(2, 7);
        arr.insert(3, 3);
        arr.insert(4, 2);
        arr.insert(5, 2);

        countFrequency(arr);
    }
}

// Question4
public class Merge {
    private int[] array;
    private int size;

    public Merge(int capacity) {
        array = new int[capacity];
        size = 0;
    }

    public void mergeSortedArrays(int[] arr1, int[] arr2) {
        int i = 0, j = 0, k = 0;
        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] <= arr2[j]) {
                array[k++] = arr1[i++];
            } else {
                array[k++] = arr2[j++];
            }
        }
        while (i < arr1.length) {
            array[k++] = arr1[i++];
        }
        while (j < arr2.length) {
            array[k++] = arr2[j++];
        }
        size = k;
    }

    public static void main(String[] args) {
        Merge arrayADT = new Merge(10);
        int[] arr1 = {1, 2, 5, 7, 8};
        int[] arr2 = {3, 4, 6, 9, 10};

        arrayADT.mergeSortedArrays(arr1, arr2);
		System.out.print("Merged Sorted Array: ");
        arrayADT.traverse();
    }
}

// Question5
public class ArrayADT {
    private int[] array;
    private int size;

    public ArrayADT(int capacity) {
        array = new int[capacity];
        size = 0;
    }
	
	public boolean isFull() {
        return size == array.length;
    }

    public void insert(int index, int value) {		
        if (index < 0 || index > array.length-1) {
			System.out.println("Index is out of range");
            //throw new IndexOutOfBoundsException("Index is out of range");
        }
		else if(isFull()){
			System.out.println("Array is full");
		}		
		else{
			// Shift elements to the right to make space for the new value
			for (int i = size - 1; i >= index; i--) {
				array[i + 1] = array[i];
			}
			array[index] = value;
			size++;
			System.out.println(value+ " inserted at "+ index);
		}        
    }
	
    public void traverse() {
        for (int i = 0; i < size; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }
	
	public void bubbleSort() {
        for (int i = 0; i < size - 1; i++) {
            for (int j = 0; j < size - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }

    public static void main(String[] args) {
        ArrayADT arrayADT = new ArrayADT(10);
        arrayADT.insert(0, 5);
        arrayADT.insert(1, 2);
        arrayADT.insert(2, 8);
        arrayADT.insert(3, 1);
        arrayADT.insert(4, 10);
		
        arrayADT.bubbleSort();
		System.out.print("Sorted Array: ");
        arrayADT.traverse();
    }
}

// Question6
public class ArrayADT {
    private int[] array;
    private int size;

    public ArrayADT(int capacity) {
        array = new int[capacity];
        size = 0;
    }

    public boolean isFull() {
        return size == array.length;
    }

    public void insert(int index, int value) {		
        if (index < 0 || index > array.length-1) {
			System.out.println("Index is out of range");
            //throw new IndexOutOfBoundsException("Index is out of range");
        }
		else if(isFull()){
			System.out.println("Array is full");
		}		
		else{
			// Shift elements to the right to make space for the new value
			for (int i = size - 1; i >= index; i--) {
				array[i + 1] = array[i];
			}
			array[index] = value;
			size++;
			System.out.println(value+ " inserted at "+ index);
		}        
    }

    public void selectionSort() {
        for (int i = 0; i < size - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < size; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j;
                }
            }
            // Swap the minimum element with the current element
            int temp = array[minIndex];
            array[minIndex] = array[i];
            array[i] = temp;
        }
    }

	public void traverse() {
        for (int i = 0; i < size; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }
    
    public static void main(String[] args) {
        ArrayADT arrayADT = new ArrayADT(10);
        arrayADT.insert(0, 5);
        arrayADT.insert(1, 2);
        arrayADT.insert(2, 8);
        arrayADT.insert(3, 1);
        arrayADT.insert(4, 10);

        arrayADT.selectionSort();
		System.out.print("Sorted Array: ");
        arrayADT.traverse();
    }
}